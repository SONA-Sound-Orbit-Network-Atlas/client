// lib/axios.ts
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL,
  timeout: 10000,
  withCredentials: true, // Ïø†ÌÇ§ ÏûêÎèô Ï†ÑÏÜ°
  headers: {
    'Content-Type': 'application/json',
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    Pragma: 'no-cache',
    Expires: '0',
  },
});

// ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
console.log('üîç Axios ÏÑ§Ï†ï Ï†ïÎ≥¥:');
console.log('- VITE_API_BASE_URL:', import.meta.env.VITE_API_BASE_URL);
console.log('- Axios baseURL:', axiosInstance.defaults.baseURL);
console.log('- MSW ÏÇ¨Ïö© Ïó¨Î∂Ä:', import.meta.env.VITE_USE_MOCK);

// ÏöîÏ≤≠ Ïù∏ÌÑ∞ÏÖâÌÑ∞: accessToken ÏûêÎèô ÏÇΩÏûÖ
axiosInstance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// ÏùëÎãµ Ïù∏ÌÑ∞ÏÖâÌÑ∞: 401 Ï≤òÎ¶¨ ‚Üí refresh ÏãúÎèÑ
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    const accessToken = localStorage.getItem('accessToken');

    if (error.response) {
      console.log('HTTP ÌÜµÏã† ÏûêÏ≤¥ ÏÑ±Í≥µ');
    } else {
      console.log('HTTP ÌÜµÏã† ÏûêÏ≤¥ Ïã§Ìå®');
    }
    // 401 ÏóêÎü¨ + accessTokenÏù¥ 'ÏûàÏóàÎçò' Í≤ΩÏö∞ ‚Üí refresh ÏãúÎèÑ
    if (
      error.response?.status === 401 &&
      accessToken &&
      !originalRequest._retry &&
      !originalRequest.url.includes('/api/v1/auth/refresh')
    ) {
      originalRequest._retry = true;

      try {
        console.log('refresh ÏãúÎèÑ');
        // accessToken Í∞±Ïã† ÏöîÏ≤≠ => Ïò§Î•ò => refresh ÌÜ†ÌÅ∞ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå => error throw (catch Ïù¥Îèô)
        const res = await axiosInstance.post('/api/v1/auth/refresh');

        // accessToken Í∞±Ïã† ÏöîÏ≤≠ => ÏÑ±Í≥µ => ÏÉàÎ°úÏö¥ accessToken Î∞úÍ∏â => ÏöîÏ≤≠ Ïû¨ÏãúÎèÑ
        const newToken = res.data.accessToken; // Î∞îÎîî (JSON)

        localStorage.setItem('accessToken', newToken);
        axiosInstance.defaults.headers.common.Authorization = `Bearer ${newToken}`;
        originalRequest.headers.Authorization = `Bearer ${newToken}`;

        return axiosInstance(originalRequest);
      } catch (refreshError) {
        // window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }

    // accessTokenÏù¥ ÏïÑÏòà 'ÏóÜÎäî' Í≤ΩÏö∞ ‚Üí Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ Ïù¥Îèô => ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑ† Í≥µÌÜµÏ≤òÎ¶¨ X => Í∞Å APIÏóêÏÑú Ï≤òÎ¶¨
    // if (
    //   error.response?.status === 401 &&
    //   !accessToken &&
    //   window.location.pathname !== '/login'
    // ) {
    //   window.location.href = '/login';
    // }

    return Promise.reject(error);
  }
);

export default axiosInstance;
